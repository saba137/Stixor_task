{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\stixor\\\\Client\\\\src\\\\Components\\\\Users.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport UserCard from './UserCard';\nimport { useQuery, gql, NetworkStatus } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_USERS = gql`\n  query {\n    getAllUsers {\n      id\n      firstName\n      lastName\n      email\n      password\n    }\n  }\n`;\n\nconst Users = props => {\n  _s();\n\n  //Passing query to useQuery hook to fetch data\n  const {\n    data,\n    loading,\n    error,\n    networkStatus\n  } = useQuery(ALL_USERS, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  if (networkStatus === NetworkStatus['refetch']) return 'Refetching!';else if (loading) return 'Loading..';else if (error) return `Error! ${error}`;else if (data) console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"is-scrollable-list\",\n    children: data && data.filter(user => {\n      if (props.searchField == \"\") {\n        return user;\n      } else if (user.firstName.toLowerCase().includes(props.searchField.toLowerCase())) {\n        return user;\n      }\n    }, props.data ? props.data.getAllsUsers.map(user => /*#__PURE__*/_jsxDEV(UserCard, {\n      item: user\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }, this)) : 'Users list undefined...')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Users, \"KBE8BsYV7XpLbA1wgkbVR5k03s0=\", false, function () {\n  return [useQuery];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/stixor/Client/src/Components/Users.js"],"names":["React","UserCard","useQuery","gql","NetworkStatus","ALL_USERS","Users","props","data","loading","error","networkStatus","fetchPolicy","console","log","filter","user","searchField","firstName","toLowerCase","includes","getAllsUsers","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,aAAxB,QAA6C,gBAA7C;;AAEA,MAAMC,SAAS,GAAGF,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,MAAMG,KAAK,GAAEC,KAAD,IAAS;AAAA;;AAGjB;AACA,QAAK;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAwCT,QAAQ,CAACG,SAAD,EAAY;AAACO,IAAAA,WAAW,EAAE;AAAd,GAAZ,CAArD;AAGA,MAAID,aAAa,KAAKP,aAAa,CAAC,SAAD,CAAnC,EACI,OAAO,aAAP,CADJ,KAEK,IAAIK,OAAJ,EACD,OAAO,WAAP,CADC,KAEA,IAAIC,KAAJ,EACD,OAAQ,UAASA,KAAM,EAAvB,CADC,KAEA,IAAGF,IAAH,EACDK,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,cACKA,IAAI,IAAIA,IAAI,CAACO,MAAL,CAAYC,IAAI,IAAI;AACzB,UAAIT,KAAK,CAACU,WAAN,IAAqB,EAAzB,EAA4B;AACxB,eAAOD,IAAP;AACH,OAFD,MAGK,IAAIA,IAAI,CAACE,SAAL,CAAeC,WAAf,GAA6BC,QAA7B,CAAsCb,KAAK,CAACU,WAAN,CAAkBE,WAAlB,EAAtC,CAAJ,EAA2E;AAC5E,eAAOH,IAAP;AACH;AACJ,KAPQ,EAOPT,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACC,IAAN,CAAWa,YAAX,CAAwBC,GAAxB,CAA6BN,IAAD,iBACnC,QAAC,QAAD;AAEI,MAAA,IAAI,EAAEA;AAFV,OACSA,IAAI,CAACO,EADd;AAAA;AAAA;AAAA;AAAA,YADO,CAAb,GAKO,yBAZA;AADb;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBP,CAhCD;;GAAMjB,K;UAI2CJ,Q;;;KAJ3CI,K;AAkCN,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport UserCard from './UserCard'\r\nimport { useQuery, gql, NetworkStatus } from '@apollo/client';\r\n\r\nconst ALL_USERS = gql`\r\n  query {\r\n    getAllUsers {\r\n      id\r\n      firstName\r\n      lastName\r\n      email\r\n      password\r\n    }\r\n  }\r\n`;\r\n\r\nconst Users=(props)=>{\r\n\r\n\r\n    //Passing query to useQuery hook to fetch data\r\n    const{data, loading, error, networkStatus} = useQuery(ALL_USERS, {fetchPolicy: \"cache-and-network\"})\r\n\r\n\r\n    if (networkStatus === NetworkStatus['refetch'])\r\n        return 'Refetching!';\r\n    else if (loading)\r\n        return 'Loading..';\r\n    else if (error)\r\n        return `Error! ${error}`;\r\n    else if(data)\r\n        console.log(data)\r\n        return(\r\n            <div className=\"is-scrollable-list\">\r\n                {data && data.filter(user => {\r\n                    if (props.searchField == \"\"){\r\n                        return user\r\n                    }\r\n                    else if (user.firstName.toLowerCase().includes(props.searchField.toLowerCase())){\r\n                        return user\r\n                    }\r\n                },props.data ? props.data.getAllsUsers.map((user) => (\r\n                        <UserCard\r\n                            key={user.id}\r\n                            item={user}\r\n                        />\r\n                    )) : 'Users list undefined...' )}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Users;"]},"metadata":{},"sourceType":"module"}